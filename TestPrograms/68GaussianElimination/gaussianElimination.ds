const out = std_output();
const inp = std_input();

procedure printMatrix(real matrix A) {
	integer size = 4;

	loop i in 1..size {
		"[" -> out;
		loop j in 1..size {
			A[i, j] -> out;
			if (j < size)
				", " -> out;
		}
		"]\n" -> out;
	}
}

procedure printVector(real vector x) {
	integer size = length(x);

	"[" -> out;
	loop i in 1..size {
		x[i] -> out;
		if (i < size)
			", " -> out;
	}
	"]\n" -> out;
}

function calc(real matrix A, real vector x) returns real vector {
	integer size = length(x);
	integer interval j = 1..size;
	real vector y[size];

	loop i in 1..size {
		y[i] = A[i, j] ** x;
	}
	
	return y;
}

function sign(real a) returns real {
	if (a < 0)
		return -1.0;
	return 1.0;
}

function argmax(real vector v) returns integer {
	integer n = length(v);
	real max = sign(v[1])*v[1];
	integer ind = 1;
	
	loop i in 2..n {
		if (sign(v[i])*v[i] > max) {
			max = sign(v[i])*v[i];
			ind = i;
		}
	}
	
	return ind;
}

function zeros(integer n) returns real matrix {
	real matrix A[n, n];
	return A;
}

function eye(integer n) returns real matrix {
	real matrix A[n, n];
	loop i in 1..n {
		A[i, i] = 1;
	}
	return A;
}

function vectorMult(real vector x, real vector y) returns real matrix {
	integer n = length(y);
	real matrix A[n, n];
	
	loop i in 1..n, j in 1..n {
		A[i, j] = x[i]*y[j];
	}
	
	return A;
}

procedure solve(real matrix A, real vector y) returns real vector {
    integer n = length(y);
    real vector x[n];
    real vector z[n];
    real vector y_hat[n];
    real matrix L = zeros(n);
    real matrix U = A;
    real matrix P = eye(n);
    
    // Factor
    loop k in 1..(n-1) {
    	integer p = argmax(U[k..n, k]);
    	p = p + k - 1;
    	
    	if (p != k) {
    		U[[p, k], 1..n] = U[[k, p], 1..n];
            L[[p, k], 1..n] = L[[k, p], 1..n];
            P[[p, k], 1..n] = P[[k, p], 1..n];
    	}
    	
    	if (U[k, k] != 0) {
    		 L[(k+1)..n, k] = U[(k+1)..n, k]/U[k, k];
    		 U[(k+1)..n, k] = 0;
    		 U[(k+1)..n, (k+1)..n] = U[(k+1)..n, (k+1)..n] - vectorMult(L[(k+1)..n, k], U[k, (k+1)..n]);
    	}
    }
    
    L = L + eye(n);
    
    y_hat = calc(P, y);
    
    // Solve Lower Tri
    loop j in 1..n {
        z[j] = y_hat[j]/L[j,j];
        y_hat[(j+1)..n] = y_hat[(j+1)..n] - L[(j+1)..n,j]*z[j];
    }
    
    // Solve Upper Tri
    loop i in 1..n {
    	integer j = n - i + 1;
    	x[j] = z[j]/U[j,j];
        z[1..(j-1)] = z[1..(j-1)] - U[1..(j-1),j]*x[j];
    }

	return x;
}

procedure main() returns integer {
	real matrix A[4, 4];
	real vector x[4];
	real vector y[4];
	
	// Get Matrix
	loop i in 1..4, j in 1..4 {
		real value;
		value <- inp;
		A[i, j] = value;
	}
	
	// Get Vector
	loop i in 1..4  {
		real value;
		value <- inp;
		y[i] = value;
	}
	
	"A:\n" -> out;
	printMatrix(A);
	"y: " -> out;
	printVector(y);
	
	x = solve(A, y);
	
	"x: " -> out;
	printVector(x);
	
	"check: " -> out;
	printVector(calc(A, x));
	
	return 0;
}