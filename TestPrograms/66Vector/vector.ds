const out = std_output();
const inp = std_input();

const integer vector vglob[3] = [8, 9, 10];

procedure printVector(integer vector v[3]) {
	'[' -> out; 
	v[1] -> out; ',' -> out; ' ' -> out;
	v[2] -> out; ',' -> out; ' ' -> out;
	v[3] -> out; ']' -> out; '\n' -> out;
}

procedure zeros() returns integer vector [3] {
	return [0, 0, 0];
}

procedure main() returns integer {
	//integer v3[3]; // Bug not allocated
	
	integer v1[1+2] = [1, 2, 3];
	integer v2[*] = [3, 4, 5];
	integer v3[3] = 0;
	integer v4[3] = zeros();
	integer v5[*] = 1..3 + v1;
	
	v3 = zeros();
	v3 = v3 + 2;
	
	"Vector\n" -> out;
	
	"\tinteger v1[1+3] =  " -> out;
	printVector(v1);
	"\tinteger v2[*] =  " -> out;
	printVector(v2);
	"\tinteger v3[3] = 0 =  " -> out;
	printVector(v3);
	"\tinteger v4[3] = zeros() =  " -> out;
	printVector(v4);
	"\tinteger v5[*] = 1..3 + v1 =  " -> out;
	printVector(v5);
	
	"Addition\n" -> out;
	
	"\t1 + v1 + 2 = " -> out;
	printVector(1 + v1 + 2);
	"\tv1 + v2 = " -> out;
	printVector(v1 + v2);
	
	"Subtraction\n" -> out;
	
	"\tv2 - v1 = " -> out;
	printVector(v2 - v1);
	"\t(5 - v1) - 1) = " -> out;
	printVector((5 - v1) - 1);
	
	"Multiplication\n" -> out;
	
	"\tv1 * v2 = " -> out;
	printVector(v1 * v2);
	"\t2 * v1 * 3 = " -> out;
	printVector(2 * v1 * 3);
	
	"Division\n" -> out;
	
	"\t(2 * v1 * 3) / 3 = " -> out;
	printVector((2 * v1 * 3) / 3);
	"\t18 / v1 = " -> out;
	printVector(18 / v1);
	"\tv1 / v1 = " -> out;
	printVector(v1 / v1);
	
	"Power\n" -> out;
	
	"\tv1 ^ v1 = " -> out;
	printVector(v1 ^ v1);
	"\tv1 ^ 2 = " -> out;
	printVector(v1 ^ 2);
	"\t2 ^ v1 = " -> out;
	printVector(2 ^ v1);

	return 0;
}
