real_type() ::= <<
float
>>

real_literal(id, val) ::= <<
  <vlocal_result(id)> = fptrunc double <val> to float
>>

real_null(id) ::= <<
 <vlocal_result(id)> = fadd float 0.0, 0.0
>>

real_identity(id) ::= <<
 <vlocal_result(id)> = fadd float 1.0, 0.0
>>

real_init_local(sym_id) ::= <<
<vlocal_symbol(sym_id)> = alloca float
>>

real_init_global(sym_id) ::= <<
<vglobalSymbol(sym_id)> = private unnamed_addr global float 0.0
>>

real_get_local(id, sym_id) ::= <<
<vlocal_result(id)> = load float*  <vlocal_symbol(sym_id)>
>>

real_get_global(id, sym_id) ::= <<
<vlocal_result(id)> = load float*  <vglobalSymbol(sym_id)>
>>

real_local_assign(id, sym_id, expr, expr_id) ::= <<
<expr>
  store float <vlocal_result(expr_id)>, float* <vlocal_symbol(sym_id)>
>>

real_global_assign(id, sym_id, expr, expr_id) ::= <<
<expr>
  store float <vlocal_result(expr_id)>, float* <vglobalSymbol(sym_id)>
>>

real_minus(id, expr, expr_id) ::= <<
<expr>
  <vlocal_result(id)> = fsub float 0.0, <vlocal_result(expr_id)>
>>

real_add(id, lhs, lhs_id, rhs, rhs_id) ::= <<
<lhs>
<rhs>
  <vlocal_result(id)> = fadd float <vlocal_result(lhs_id)>, <vlocal_result(rhs_id)>
>>

real_sub(id, lhs, lhs_id, rhs, rhs_id) ::= <<
<lhs>
<rhs>
  <vlocal_result(id)> = fsub float <vlocal_result(lhs_id)>, <vlocal_result(rhs_id)>
>>

real_mul(id, lhs, lhs_id, rhs, rhs_id) ::= <<
<lhs>
<rhs>
  <vlocal_result(id)> = fmul float <vlocal_result(lhs_id)>, <vlocal_result(rhs_id)>
>>

real_div(id, lhs, lhs_id, rhs, rhs_id) ::= <<
<lhs>
<rhs>
  <vlocal_result(id)> = fdiv float <vlocal_result(lhs_id)>, <vlocal_result(rhs_id)>
>>

real_mod(id, lhs, lhs_id, rhs, rhs_id) ::= <<
<lhs>
<rhs>
  <vlocal_result(id)> = frem float <vlocal_result(lhs_id)>, <vlocal_result(rhs_id)>
>>

real_pow(id, lhs, lhs_id, rhs, rhs_id) ::= <<
<lhs>
<rhs>
  <vlocal_result(id)> = call float @llvm.pow.f32(float <vlocal_result(lhs_id)>, float <vlocal_result(rhs_id)>)
>>

real_eq(id, lhs, lhs_id, rhs, rhs_id) ::= <<
<lhs>
<rhs>
  <vlocal_result(id)> = fcmp oeq float <vlocal_result(lhs_id)>, <vlocal_result(rhs_id)>
>>

real_ne(id, lhs, lhs_id, rhs, rhs_id) ::= <<
<lhs>
<rhs>
  <vlocal_result(id)> = fcmp one float <vlocal_result(lhs_id)>, <vlocal_result(rhs_id)>
>>

real_lt(id, lhs, lhs_id, rhs, rhs_id) ::= <<
<lhs>
<rhs>
  <vlocal_result(id)> = fcmp olt float <vlocal_result(lhs_id)>, <vlocal_result(rhs_id)>
>>

real_le(id, lhs, lhs_id, rhs, rhs_id) ::= <<
<lhs>
<rhs>
  <vlocal_result(id)> = fcmp ole float <vlocal_result(lhs_id)>, <vlocal_result(rhs_id)>
>>

real_gt(id, lhs, lhs_id, rhs, rhs_id) ::= <<
<lhs>
<rhs>
  <vlocal_result(id)> = fcmp ogt float <vlocal_result(lhs_id)>, <vlocal_result(rhs_id)>
>>

real_ge(id, lhs, lhs_id, rhs, rhs_id) ::= <<
<lhs>
<rhs>
  <vlocal_result(id)> = fcmp oge float <vlocal_result(lhs_id)>, <vlocal_result(rhs_id)>
>>

real_to_int(id, expr, expr_id) ::= <<
<expr>
  <vlocal(id)>temp = call float @llvm.floor.f32(float <vlocal_result(expr_id)>)
  <vlocal_result(id)> = fptosi float <vlocal(id)>temp to i32
>>

real_to_real(id, expr, expr_id) ::= <<
<expr>
  <vlocal_result(id)> = fadd float <vlocal_result(expr_id)>, 0.0
>>

real_print(id, expr, expr_id) ::= <<
<expr>
  <vlocal(id)> = getelementptr [3 x i8]* @.str.fmt.float, i32 0, i32 0
  <vlocal(id)>dbl = fpext float <vlocal_result(expr_id)> to double
  call i32 (i8*, ...)* @printf(i8* <vlocal(id)>, double <vlocal(id)>dbl)
>>

real_input(id, sym_id) ::= <<
  <vlocal_result(id)> = call float @readFloat()
  store float <vlocal_result(id)>, float* <vlocal_symbol(sym_id)>
>>
