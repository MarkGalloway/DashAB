vector_type() ::= <<
i8*
>>

vector_init_local(sym_id) ::= <<
<vlocal_symbol(sym_id)> = alloca i8*
>>

vector_init_global(sym_id) ::= <<
<vglobalSymbol(sym_id)> = private unnamed_addr global i8* null
>>

vector_init_literal(id, type_name, size_expr, size_expr_id, element_exprs) ::= <<
<size_expr>
  <vlocal_result(id)> = call i8* @allocVector()
  call @<type_name>_allocVector(i8* <vlocal_result(id)>, <vlocal_result(size_expr_id)>)
<element_exprs; separator="\n">
>>

vector_assign(id, type_name, vector_var_expr, vector_var_expr_id, rhs_expr, rhs_expr_id) ::= <<
<vector_var_expr>
<rhs_expr>
  <vlocal(id)>_old_vec = load i8** <vlocal_result(vector_var_expr_id)>

  ;// Free old lhs vector
  call void @releaseVector(i8* <vlocal(id)>_old_vec)

  ;// Alloc new lhs vector with right size
  i32 <vlocal(id)>_size = call i32 @getVectorSize(i8* <vlocal_result(rhs_expr_id)>)
  <vlocal(id)>_new_vec = call i8* @allocVector()
  call @<type_name>_allocVector(i8* <vlocal(id)>_new_vec, i32 <vlocal(id)>_size)
  store i8* <vlocal(id)>_new_vec, i8** <vlocal_result(vector_var_expr_id)>

  ;// Copy rhs vector into lhs vector
  call void @<type_name>_copyVector(i8* <vlocal(id)>_new_vec, i8* <vlocal_result(rhs_expr_id)>)

  ;// TODO: Free rhs vector
>>

vector_elem_assign(id, vector_expr, vector_expr_id, type_name, llvm_type, index_expr, index_expr_id, expr, expr_id) ::= <<
<expr>
<vector_expr>
<index_expr>
  <vlocal(id)>_stack = call i8* @llvm.stacksave();
  <vlocal(id)>_value = alloca <llvm_type>;
  store <llvm_type> <vlocal_result(expr_id)>, <llvm_type>* <vlocal(id)>_value
  <vlocal(id)>_success = call i32 @<type_name>_setElement(i8* <vlocal_result(vector_expr_id)>, i32 <vlocal_result(index_expr_id)>, <llvm_type>* <vlocal(id)>_value)
  call void @llvm.stackrestore(i8* <vlocal(id)>_stack);
>>

vector_elem_assign_known_index(id, vector_expr, vector_expr_id, type_name, llvm_type, index, expr, expr_id) ::= <<
<expr>
<vector_expr>
<index_expr>
  <vlocal(id)>_stack = call i8* @llvm.stacksave();
  <vlocal(id)>_value = alloca <llvm_type>;
  store <llvm_type> <vlocal_result(expr_id)>, <llvm_type>* <vlocal(id)>_value
  <vlocal(id)>_success = call i32(i8*, i32, <llvm_type>)* @<type_name>_setElement(i8* <vlocal_result(vector_expr_id)>, i32 <index>, <llvm_type>* <vlocal(id)>_value)
  call void @llvm.stackrestore(i8* <vlocal(id)>_stack);
>>

vector_get_element(id, vector_expr, vector_expr_id, type_name, llvm_type, index_expr, index_expr_id) ::= <<
<vector_expr>
<index_expr>
  <vlocal(id)>_stack = call i8* @llvm.stacksave();
  <vlocal(id)>_value = alloca <llvm_type>;
  <vlocal(id)>_success = call i32(<llvm_type>*, i8*, i32)* @<type_name>_getElement(<llvm_type>* <vlocal(id)>_value, i8* <vlocal_result(vector_expr_id)>, i32 <vlocal_result(index_expr_id)>)
  <vlocal_result(id)> = load <llvm_type>* <vlocal(id)>_value
  call void @llvm.stackrestore(i8* <vlocal(id)>_stack);
>>

vector_get_local(id, sym_id) ::= <<
  <vlocal_result(id)> = load i8** <vlocal_symbol(sym_id)>
>>

vector_get_global(id, sym_id) ::= <<
  <vlocal_result(id)> = load i8** <vglobalSymbol(sym_id)>
>>

vector_get_local_var(id, sym_id) ::= <<
  <vlocal_result(id)> = bitcast i8** <vlocal_symbol(sym_id)>, to i8**
>>

vector_get_global_var(id, sym_id) ::= <<
  <vlocal_result(id)> = bitcast i8** <vglobalSymbol(sym_id)>, to i8**
>>

vector_local_assign(id, sym_id, expr, expr_id) ::= <<
<expr>
; TODO: Implement
>>

vector_global_assign(id, sym_id, expr, expr_id) ::= <<
<expr>
; TODO: Implement
>>

/* TODO: Write rest of vector operation runtime function wrappers. */
