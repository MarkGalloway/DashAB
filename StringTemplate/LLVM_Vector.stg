vector_type() ::= <<
i8*
>>

vector_init_local(sym_id) ::= <<
<vlocal_symbol(sym_id)> = alloca i8*
>>

vector_init_global(sym_id) ::= <<
<vglobalSymbol(sym_id)> = private unnamed_addr global i8* null
>>

vector_alloc_local(sym_id) ::= <<
	<vlocal_result(sym_id)>_alloc = call i8* @allocVector()
	store i8* <vlocal_result(sym_id)>_alloc, i8** <vlocal_symbol(sym_id)>
>>

vector_alloc_global(sym_id) ::= <<
	<vlocal_result(sym_id)>_alloc = call i8* @allocVector()
	store i8* <vlocal_result(sym_id)>_alloc, i8** <vglobalSymbol(sym_id)>
>>

vector_free_local(id, sym_id) ::= <<
	<vlocal_result(id)>_free = load i8** <vlocal_symbol(sym_id)>
	call void @releaseVector(i8* <vlocal_result(id)>_free)
>>

vector_init_literal(id, type_name, size_expr, size_expr_id, element_exprs) ::= <<
<size_expr>
  <vlocal_result(id)> = call i8* @allocVector()
  call void @<type_name>_allocVector(i8* <vlocal_result(id)>, i32 <vlocal_result(size_expr_id)>)
<element_exprs; separator="\n">
>>

vector_assign_decl(id, type_name, vector_size, vector_size_id, vector_var_expr, vector_var_expr_id, rhs_expr, rhs_expr_id) ::= <<
<vector_size>
<vector_var_expr>
<rhs_expr>
  ;// Alloc new lhs vector
	<vlocal(id)>_vec = call i8* @allocVector()
  call void @<type_name>_allocVector(i8* <vlocal(id)>_vec, i32 <vlocal_result(vector_size_id)>)
  call void @<type_name>_assignVector(i8* <vlocal(id)>_vec, i8* <vlocal_result(rhs_expr_id)>)
	store i8* <vlocal(id)>_vec, i8** <vlocal_result(vector_var_expr_id)>
>>

vector_assign_decl_scalar(id, type_name, type, vector_size, vector_size_id, vector_var_expr, vector_var_expr_id, rhs_expr, rhs_expr_id) ::= <<
<vector_size>
<vector_var_expr>
<rhs_expr>
  <vlocal(id)>_vec = call i8* @allocVector()
  call void @<type_name>_allocVector(i8* <vlocal(id)>_vec, i32 <vlocal_result(vector_size_id)>)
  call void @<type_name>_assignVectorScalar(i8* <vlocal(id)>_vec, <type> <vlocal_result(rhs_expr_id)>)
	store i8* <vlocal(id)>_vec, i8** <vlocal_result(vector_var_expr_id)>
  
>>

vector_assign_decl_infer(id, type_name, vector_var_expr, vector_var_expr_id, rhs_expr, rhs_expr_id) ::= <<
<vector_var_expr>
<rhs_expr>
  ;// Alloc new lhs vector with right size
  <vlocal(id)>_size = call i32 @getVectorSize(i8* <vlocal_result(rhs_expr_id)>)
	<vlocal(id)>_vec = call i8* @allocVector()
  call void @<type_name>_allocVector(i8* <vlocal(id)>_vec, i32 <vlocal(id)>_size)
  call void @<type_name>_assignVector(i8* <vlocal(id)>_vec, i8* <vlocal_result(rhs_expr_id)>)
	store i8* <vlocal(id)>_vec, i8** <vlocal_result(vector_var_expr_id)>
>>

vector_assign(id, type_name, vector_var_expr, vector_var_expr_id, rhs_expr, rhs_expr_id) ::= <<
<vector_var_expr>
<rhs_expr>
  <vlocal(id)>_vec = load i8** <vlocal_result(vector_var_expr_id)>
  
  ;//Assume vector is already allocated to the right size
  call void @<type_name>_assignVector(i8* <vlocal(id)>_vec, i8* <vlocal_result(rhs_expr_id)>)
>>

vector_assign_scalar(id, type_name, type, vector_var_expr, vector_var_expr_id, rhs_expr, rhs_expr_id) ::= <<
<vector_var_expr>
<rhs_expr>
  <vlocal(id)>_vec = load i8** <vlocal_result(vector_var_expr_id)>
  
  ;//Assume vector is already allocated to the right size
  call void @<type_name>_assignVectorScalar(i8* <vlocal(id)>_vec, <type> <vlocal_result(rhs_expr_id)>)
>>

vector_elem_assign(id, vector_expr, vector_expr_id, type_name, llvm_type, index_expr, index_expr_id, expr, expr_id) ::= <<
<expr>
<vector_expr>
<index_expr>
  <vlocal(id)>_success = call i32 @<type_name>_setElement(i8* <vlocal_result(vector_expr_id)>, i32 <vlocal_result(index_expr_id)>, <llvm_type> <vlocal_result(expr_id)>)
>>

vector_elem_assign_known_index(id, vector_expr, vector_expr_id, type_name, llvm_type, index, expr, expr_id) ::= <<
<expr>
<vector_expr>
  <vlocal(id)>_success = call i32(i8*, i32, <llvm_type>)* @<type_name>_setElement(i8* <vlocal_result(vector_expr_id)>, i32 <index>, <llvm_type> <vlocal_result(expr_id)>)
>>

vector_get_element(id, vector_expr, vector_expr_id, type_name, llvm_type, index_expr, index_expr_id) ::= <<
<vector_expr>
<index_expr>
  <vlocal(id)>_stack = call i8* @llvm.stacksave();
  <vlocal(id)>_value = alloca <llvm_type>;
  <vlocal(id)>_success = call i32(<llvm_type>*, i8*, i32)* @<type_name>_getElement(<llvm_type>* <vlocal(id)>_value, i8* <vlocal_result(vector_expr_id)>, i32 <vlocal_result(index_expr_id)>)
  <vlocal_result(id)> = load <llvm_type>* <vlocal(id)>_value
  call void @llvm.stackrestore(i8* <vlocal(id)>_stack);
>>

vector_get_local(id, sym_id) ::= <<
  <vlocal_result(id)> = load i8** <vlocal_symbol(sym_id)>
>>

vector_get_global(id, sym_id) ::= <<
  <vlocal_result(id)> = load i8** <vglobalSymbol(sym_id)>
>>

vector_get_local_var(id, sym_id) ::= <<
  <vlocal_result(id)> = bitcast i8** <vlocal_symbol(sym_id)> to i8**
>>

vector_get_global_var(id, sym_id) ::= <<
  <vlocal_result(id)> = bitcast i8** <vglobalSymbol(sym_id)> to i8**
>>

vector_local_assign(id, sym_id, expr, expr_id) ::= <<
<expr>
; TODO: Implement
>>

vector_global_assign(id, sym_id, expr, expr_id) ::= <<
<expr>
; TODO: Implement
>>

vector_add_vector(id, type_name, lhs, lhs_id, rhs, rhs_id) ::= <<
<rhs>
<lhs>
  <vlocal_result(id)> = call i8* @allocVector()
  <vlocal(id)>_size = call i32 @getVectorSize(i8* <vlocal_result(lhs_id)>)
  call void @<type_name>_allocVector(i8* <vlocal_result(id)>, i32 <vlocal(id)>_size)
  <vlocal(id)>_success = call i32 @<type_name>_VectorAddVector(i8* <vlocal_result(id)>, i8* <vlocal_result(lhs_id)>, i8* <vlocal_result(rhs_id)>);
>>

vector_add_scalar_int(id, type_name, lhs, lhs_id, rhs, rhs_id) ::= <<
<rhs>
<lhs>
  <vlocal_result(id)> = call i8* @allocVector()
  <vlocal(id)>_size = call i32 @getVectorSize(i8* <vlocal_result(lhs_id)>)
  call void @<type_name>_allocVector(i8* <vlocal_result(id)>, i32 <vlocal(id)>_size)
  <vlocal(id)>_success = call i32 @<type_name>_VectorAddScalar(i8* <vlocal_result(id)>, i8* <vlocal_result(lhs_id)>, i32 <vlocal_result(rhs_id)>);
>>

scalar_add_vector_int(id, type_name, lhs, lhs_id, rhs, rhs_id) ::= <<
<rhs>
<lhs>
  <vlocal_result(id)> = call i8* @allocVector()
  <vlocal(id)>_size = call i32 @getVectorSize(i8* <vlocal_result(rhs_id)>)
  call void @<type_name>_allocVector(i8* <vlocal_result(id)>, i32 <vlocal(id)>_size)
  <vlocal(id)>_success = call i32 @<type_name>_VectorAddScalar(i8* <vlocal_result(id)>, i8* <vlocal_result(rhs_id)>, i32 <vlocal_result(lhs_id)>);
>>

vector_subtract_vector(id, type_name, lhs, lhs_id, rhs, rhs_id) ::= <<
<rhs>
<lhs>
  <vlocal_result(id)> = call i8* @allocVector()
  <vlocal(id)>_size = call i32 @getVectorSize(i8* <vlocal_result(lhs_id)>)
  call void @<type_name>_allocVector(i8* <vlocal_result(id)>, i32 <vlocal(id)>_size)
  <vlocal(id)>_success = call i32 @<type_name>_VectorSubtractVector(i8* <vlocal_result(id)>, i8* <vlocal_result(lhs_id)>, i8* <vlocal_result(rhs_id)>);
>>

vector_subtract_scalar_int(id, type_name, lhs, lhs_id, rhs, rhs_id) ::= <<
<rhs>
<lhs>
  <vlocal_result(id)> = call i8* @allocVector()
  <vlocal(id)>_size = call i32 @getVectorSize(i8* <vlocal_result(lhs_id)>)
  call void @<type_name>_allocVector(i8* <vlocal_result(id)>, i32 <vlocal(id)>_size)
  <vlocal(id)>_success = call i32 @<type_name>_VectorSubtractScalar(i8* <vlocal_result(id)>, i8* <vlocal_result(lhs_id)>, i32 <vlocal_result(rhs_id)>);
>>

scalar_subtract_vector_int(id, type_name, lhs, lhs_id, rhs, rhs_id) ::= <<
<rhs>
<lhs>
  <vlocal_result(id)> = call i8* @allocVector()
  <vlocal(id)>_size = call i32 @getVectorSize(i8* <vlocal_result(rhs_id)>)
  call void @<type_name>_allocVector(i8* <vlocal_result(id)>, i32 <vlocal(id)>_size)
  <vlocal(id)>_success = call i32 @<type_name>_ScalarSubtractVector(i8* <vlocal_result(id)>, i32 <vlocal_result(lhs_id)>, i8* <vlocal_result(rhs_id)>);
>>

vector_multiply_vector(id, type_name, lhs, lhs_id, rhs, rhs_id) ::= <<
<rhs>
<lhs>
  <vlocal_result(id)> = call i8* @allocVector()
  <vlocal(id)>_size = call i32 @getVectorSize(i8* <vlocal_result(lhs_id)>)
  call void @<type_name>_allocVector(i8* <vlocal_result(id)>, i32 <vlocal(id)>_size)
  <vlocal(id)>_success = call i32 @<type_name>_VectorMultiplyVector(i8* <vlocal_result(id)>, i8* <vlocal_result(lhs_id)>, i8* <vlocal_result(rhs_id)>);
>>

vector_multiply_scalar_int(id, type_name, lhs, lhs_id, rhs, rhs_id) ::= <<
<rhs>
<lhs>
  <vlocal_result(id)> = call i8* @allocVector()
  <vlocal(id)>_size = call i32 @getVectorSize(i8* <vlocal_result(lhs_id)>)
  call void @<type_name>_allocVector(i8* <vlocal_result(id)>, i32 <vlocal(id)>_size)
  <vlocal(id)>_success = call i32 @<type_name>_VectorMultiplyScalar(i8* <vlocal_result(id)>, i8* <vlocal_result(lhs_id)>, i32 <vlocal_result(rhs_id)>);
>>

scalar_multiply_vector_int(id, type_name, lhs, lhs_id, rhs, rhs_id) ::= <<
<rhs>
<lhs>
  <vlocal_result(id)> = call i8* @allocVector()
  <vlocal(id)>_size = call i32 @getVectorSize(i8* <vlocal_result(rhs_id)>)
  call void @<type_name>_allocVector(i8* <vlocal_result(id)>, i32 <vlocal(id)>_size)
  <vlocal(id)>_success = call i32 @<type_name>_ScalarMultiplyVector(i8* <vlocal_result(id)>, i32 <vlocal_result(lhs_id)>, i8* <vlocal_result(rhs_id)>);
>>

/* TODO: Write rest of vector operation runtime function wrappers. */
