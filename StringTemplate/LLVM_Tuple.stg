tuple(id, types) ::= <<
<tuple_type(id)> = type {
  <types>
}
>>

tuple_type(type_id) ::= <<
%T<type_id>
>>

tuple_init_local(sym_id, type_id) ::= <<
<vlocal_symbol(sym_id)> = alloca <tuple_type(type_id)>
>>

tuple_init_literal(id, type_id, element_exprs) ::= <<
  <vlocal_result(id)> = alloca <tuple_type(type_id)>
<element_exprs; separator="\n">
>>

tuple_init_global(sym_id, type_id, init) ::= <<
<vglobalSymbol(sym_id)> = private unnamed_addr global <tuple_type(type_id)> {<init>}
>>

tuple_get_local(id, type_id, sym_id) ::= <<
  <vlocal_result(id)> = bitcast <tuple_type(type_id)>* <vlocal_symbol(sym_id)> to <tuple_type(type_id)>*
>>

tuple_get_global(id, type_id, sym_id) ::= <<
  <vlocal_result(id)> = bitcast <tuple_type(type_id)>* <vglobalSymbol(sym_id)> to <tuple_type(type_id)>*
>>

tuple_unpack(id, tuple_expr, element_assigns) ::= <<
<tuple_expr; separator="\n">
<element_assigns; separator="\n">
>>

tuple_assign(id, lhs_expr, rhs_expr, element_assigns) ::= <<
<rhs_expr; separator="\n">
<lhs_expr; separator="\n">
<element_assigns; separator="\n">
>>

bool_tuple_assign(id, tuple_expr, tuple_expr_id, tuple_type, index, expr, expr_id) ::= <<
<expr>
<tuple_expr>
  <vlocal(id)>addr = getelementptr <tuple_type(tuple_type)>* <vlocal_result(tuple_expr_id)>, i32 0, i32 <index>
  store i1 <vlocal_result(expr_id)>, i1* <vlocal(id)>addr
>>

char_tuple_assign(id, tuple_expr, tuple_expr_id, tuple_type, index, expr, expr_id) ::= <<
<expr>
<tuple_expr>
  <vlocal(id)>addr = getelementptr <tuple_type(tuple_type)>* <vlocal_result(tuple_expr_id)>, i32 0, i32 <index>
  store i8 <vlocal_result(expr_id)>, i8* <vlocal(id)>addr
>>

int_tuple_assign(id, tuple_expr, tuple_expr_id, tuple_type, index, expr, expr_id) ::= <<
<expr>
<tuple_expr>
  <vlocal(id)>addr = getelementptr <tuple_type(tuple_type)>* <vlocal_result(tuple_expr_id)>, i32 0, i32 <index>
  store i32 <vlocal_result(expr_id)>, i32* <vlocal(id)>addr
>>

real_tuple_assign(id, tuple_expr, tuple_expr_id, tuple_type, index, expr, expr_id) ::= <<
<expr>
<tuple_expr>
  <vlocal(id)>addr = getelementptr <tuple_type(tuple_type)>* <vlocal_result(tuple_expr_id)>, i32 0, i32 <index>
  store float <vlocal_result(expr_id)>, float* <vlocal(id)>addr
>>

bool_get_tuple_member(id, tuple_expr, tuple_expr_id, tuple_type, index) ::= <<
<tuple_expr>
  <vlocal(id)>addr = getelementptr <tuple_type(tuple_type)>* <vlocal_result(tuple_expr_id)>, i32 0, i32 <index>
  <vlocal_result(id)> = load i1* <vlocal(id)>addr
>>

char_get_tuple_member(id, tuple_expr, tuple_expr_id, tuple_type, index) ::= <<
<tuple_expr>
  <vlocal(id)>addr = getelementptr <tuple_type(tuple_type)>* <vlocal_result(tuple_expr_id)>, i32 0, i32 <index>
  <vlocal_result(id)> = load i8* <vlocal(id)>addr
>>

int_get_tuple_member(id, tuple_expr, tuple_expr_id, tuple_type, index) ::= <<
<tuple_expr>
  <vlocal(id)>addr = getelementptr <tuple_type(tuple_type)>* <vlocal_result(tuple_expr_id)>, i32 0, i32 <index>
  <vlocal_result(id)> = load i32* <vlocal(id)>addr
>>

real_get_tuple_member(id, tuple_expr, tuple_expr_id, tuple_type, index) ::= <<
<tuple_expr>
  <vlocal(id)>addr = getelementptr <tuple_type(tuple_type)>* <vlocal_result(tuple_expr_id)>, i32 0, i32 <index>
  <vlocal_result(id)> = load float* <vlocal(id)>addr
>>

tuple_cmp_init(id, lhs_expr, rhs_expr) ::= <<
<lhs_expr>
<rhs_expr>
>>

bool_tuple_eq_member(id, lhs_expr_id, rhs_expr_id, tuple_type, index) ::= <<
  <vlocal(id)>lhs_<index>_addr = getelementptr <tuple_type(tuple_type)>* <vlocal_result(lhs_expr_id)>, i32 0, i32 <index>
  <vlocal(id)>lhs_<index> = load i1* <vlocal(id)>lhs_<index>_addr
  
  <vlocal(id)>rhs_<index>_addr = getelementptr <tuple_type(tuple_type)>* <vlocal_result(rhs_expr_id)>, i32 0, i32 <index>
  <vlocal(id)>rhs_<index> = load i1* <vlocal(id)>rhs_<index>_addr

  <vlocal(id)>cmp_<index> = icmp eq i1 <vlocal(id)>lhs_<index>, <vlocal(id)>rhs_<index>
  br i1 <vlocal(id)>cmp_<index>, label %tuple.eq.continue.<index>.<id>, label %tuple.cmp.false.<id>
  
  tuple.eq.continue.<index>.<id>:
>>

char_tuple_eq_member(id, lhs_expr_id, rhs_expr_id, tuple_type, index) ::= <<
  <vlocal(id)>lhs_<index>_addr = getelementptr <tuple_type(tuple_type)>* <vlocal_result(lhs_expr_id)>, i32 0, i32 <index>
  <vlocal(id)>lhs_<index> = load i8* <vlocal(id)>lhs_<index>_addr
  
  <vlocal(id)>rhs_<index>_addr = getelementptr <tuple_type(tuple_type)>* <vlocal_result(rhs_expr_id)>, i32 0, i32 <index>
  <vlocal(id)>rhs_<index> = load i8* <vlocal(id)>rhs_<index>_addr

  <vlocal(id)>cmp_<index> = icmp eq i8 <vlocal(id)>lhs_<index>, <vlocal(id)>rhs_<index>
  br i1 <vlocal(id)>cmp_<index>, label %tuple.eq.continue.<index>.<id>, label %tuple.cmp.false.<id>
  
  tuple.eq.continue.<index>.<id>:
>>

int_tuple_eq_member(id, lhs_expr_id, rhs_expr_id, tuple_type, index) ::= <<
  <vlocal(id)>lhs_<index>_addr = getelementptr <tuple_type(tuple_type)>* <vlocal_result(lhs_expr_id)>, i32 0, i32 <index>
  <vlocal(id)>lhs_<index> = load i32* <vlocal(id)>lhs_<index>_addr
  
  <vlocal(id)>rhs_<index>_addr = getelementptr <tuple_type(tuple_type)>* <vlocal_result(rhs_expr_id)>, i32 0, i32 <index>
  <vlocal(id)>rhs_<index> = load i32* <vlocal(id)>rhs_<index>_addr

  <vlocal(id)>cmp_<index> = icmp eq i32 <vlocal(id)>lhs_<index>, <vlocal(id)>rhs_<index>
  br i1 <vlocal(id)>cmp_<index>, label %tuple.eq.continue.<index>.<id>, label %tuple.cmp.false.<id>
  
  tuple.eq.continue.<index>.<id>:
>>

real_tuple_eq_member(id, lhs_expr_id, rhs_expr_id, tuple_type, index) ::= <<
  <vlocal(id)>lhs_<index>_addr = getelementptr <tuple_type(tuple_type)>* <vlocal_result(lhs_expr_id)>, i32 0, i32 <index>
  <vlocal(id)>lhs_<index> = load float* <vlocal(id)>lhs_<index>_addr
  
  <vlocal(id)>rhs_<index>_addr = getelementptr <tuple_type(tuple_type)>* <vlocal_result(rhs_expr_id)>, i32 0, i32 <index>
  <vlocal(id)>rhs_<index> = load float* <vlocal(id)>rhs_<index>_addr

  <vlocal(id)>cmp_<index> = fcmp oeq float <vlocal(id)>lhs_<index>, <vlocal(id)>rhs_<index>
  br i1 <vlocal(id)>cmp_<index>, label %tuple.eq.continue.<index>.<id>, label %tuple.cmp.false.<id>
  
  tuple.eq.continue.<index>.<id>:
>>

tuple_cmp_eq_result(id) ::= <<
	
	br label %tuple.cmp.true.<id>
	tuple.cmp.true.<id>:
	br label %tuple.cmp.done.<id>
	
	tuple.cmp.false.<id>:
	br label %tuple.cmp.done.<id>
	
	tuple.cmp.done.<id>:
	<vlocal_result(id)> = phi i1 [ 1, %tuple.cmp.true.<id> ], [ 0, %tuple.cmp.false.<id> ]
>>

tuple_cmp_ne_result(id) ::= <<
	
	br label %tuple.cmp.true.<id>
	tuple.cmp.true.<id>:
	br label %tuple.cmp.done.<id>
	
	tuple.cmp.false.<id>:
	br label %tuple.cmp.done.<id>
	
	tuple.cmp.done.<id>:
	<vlocal_result(id)> = phi i1 [ 0, %tuple.cmp.true.<id> ], [ 1, %tuple.cmp.false.<id> ]
>>

