tuple(id, types) ::= <<
%T<id> = type {
	<types>
}
>>

tuple_init_local(sym_id, type_id) ::= <<
<vlocalSymbol(sym_id)> = alloca %T<type_id>
>>

tuple_init_global(sym_id, type_id) ::= <<
<vglobalSymbol(sym_id)> = private unnamed_addr global %T<type_id> 0
>>

bool_local_tuple_assign(id, tuple_id, tuple_type, index, expr, expr_id) ::= <<
bool_local_tuple_assign(<id>, <tuple_id>, <tuple_type>, <index>, <expr>, <expr_id>)
>>

char_local_tuple_assign(id, tuple_id, tuple_type, index, expr, expr_id) ::= <<
char_local_tuple_assign(<id>, <tuple_id>, <tuple_type>, <index>, <expr>, <expr_id>)
>>

int_local_tuple_assign(id, tuple_id, tuple_type, index, expr, expr_id) ::= <<
int_local_tuple_assign(<id>, <tuple_id>, <tuple_type>, <index>, <expr>, <expr_id>)
>>

real_local_tuple_assign(id, tuple_id, tuple_type, index, expr, expr_id) ::= <<
real_local_tuple_assign(<id>, <tuple_id>, <tuple_type>, <index>, <expr>, <expr_id>)
>>

bool_get_local_tuple_member(id,  tuple_id, tuple_type, index) ::= <<
bool_get_local_tuple_member(<id>, <tuple_id>, <tuple_type>, <index>)
>>

char_get_local_tuple_member(id,  tuple_id, tuple_type, index) ::= <<
char_get_local_tuple_member(<id>, <tuple_id>, <tuple_type>, <index>)
>>

int_get_local_tuple_member(id,  tuple_id, tuple_type, index) ::= <<
int_get_local_tuple_member(<id>, <tuple_id>, <tuple_type>, <index>)
>>

real_get_local_tuple_member(id,  tuple_id, tuple_type, index) ::= <<
real_get_local_tuple_member(<id>, <tuple_id>, <tuple_type>, <index>)
>>