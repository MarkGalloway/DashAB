bool_global_variable(id) ::= <<
<vglobal(id)> = private unnamed_addr global i1 0
>>

bool_type() ::= <<
i1
>>

bool_literal(id, val) ::= <<
  <vlocal_result(id)> = add i1 <val>, 0
>>

bool_null(id) ::= <<
  <vlocal_result(id)> = add i1 0, 0
>>

bool_identity(id) ::= <<
  <vlocal_result(id)> = add i1 1, 0
>>

bool_and(id, lhs, lhs_id, rhs, rhs_id) ::= <<
<lhs>
<rhs>
  <vlocal_result(id)> = and i1 <vlocal_result(lhs_id)>, <vlocal_result(rhs_id)>
>>

bool_or(id, lhs, lhs_id, rhs, rhs_id) ::= <<
<lhs>
<rhs>
  <vlocal_result(id)> = or i1 <vlocal_result(lhs_id)>, <vlocal_result(rhs_id)>
>>

bool_xor(id, lhs, lhs_id, rhs, rhs_id) ::= <<
<lhs>
<rhs>
  <vlocal_result(id)> = icmp ne i1 <vlocal_result(lhs_id)>, <vlocal_result(rhs_id)>
>>

bool_eq(id, lhs, lhs_id, rhs, rhs_id) ::= <<
<lhs>
<rhs>
  <vlocal_result(id)> = icmp eq i1 <vlocal_result(lhs_id)>, <vlocal_result(rhs_id)>
>>

bool_ne(id, lhs, lhs_id, rhs, rhs_id) ::= <<
<lhs>
<rhs>
  <vlocal_result(id)> = icmp ne i1 <vlocal_result(lhs_id)>, <vlocal_result(rhs_id)>
>>

bool_to_int(id, expr, expr_id) ::= <<
<expr>
  <vlocal_result(id)> = zext i1 <vlocal_result(expr_id)> to i32
>>