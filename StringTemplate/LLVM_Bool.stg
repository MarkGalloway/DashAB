bool_type() ::= <<
i1
>>

bool_literal(id, val) ::= <<
  <vlocal_result(id)> = add i1 <val>, 0
>>

bool_null(id) ::= <<
  <vlocal_result(id)> = add i1 0, 0
>>

bool_identity(id) ::= <<
  <vlocal_result(id)> = add i1 1, 0
>>

bool_init_local(sym_id) ::= <<
<vlocalSymbol(sym_id)> = alloca i1
>>

bool_init_global(sym_id) ::= <<
<vglobalSymbol(sym_id)> = private unnamed_addr global i1 0
>>

bool_get_local(id, sym_id) ::= <<
<vlocal_result(id)> = load i1*  <vlocalSymbol(sym_id)>
>>

bool_get_global(id, sym_id) ::= <<
<vlocal_result(id)> = load i1*  <vglobalSymbol(sym_id)>
>>

bool_local_assign(id, expr, expr_id) ::= <<
<expr>
	store i1 <vlocal_result(expr_id)>, i32* <vlocalSymbol(id)>
>>

bool_global_assign(id, expr, expr_id) ::= <<
<expr>
	store i1 <vlocal_result(expr_id)>, i32* <vglobalSymbol(id)>
>>

bool_local_tuple_assign(id, index, expr, expr_id) ::= <<
bool_local_tuple_assign(<id>, <index>, <expr>, <expr_id>)
>>

bool_and(id, lhs, lhs_id, rhs, rhs_id) ::= <<
<lhs>
<rhs>
  <vlocal_result(id)> = and i1 <vlocal_result(lhs_id)>, <vlocal_result(rhs_id)>
>>

bool_or(id, lhs, lhs_id, rhs, rhs_id) ::= <<
<lhs>
<rhs>
  <vlocal_result(id)> = or i1 <vlocal_result(lhs_id)>, <vlocal_result(rhs_id)>
>>

bool_xor(id, lhs, lhs_id, rhs, rhs_id) ::= <<
<lhs>
<rhs>
  <vlocal_result(id)> = icmp ne i1 <vlocal_result(lhs_id)>, <vlocal_result(rhs_id)>
>>

bool_eq(id, lhs, lhs_id, rhs, rhs_id) ::= <<
<lhs>
<rhs>
  <vlocal_result(id)> = icmp eq i1 <vlocal_result(lhs_id)>, <vlocal_result(rhs_id)>
>>

bool_ne(id, lhs, lhs_id, rhs, rhs_id) ::= <<
<lhs>
<rhs>
  <vlocal_result(id)> = icmp ne i1 <vlocal_result(lhs_id)>, <vlocal_result(rhs_id)>
>>

bool_to_int(id, expr, expr_id) ::= <<
<expr>
  <vlocal_result(id)> = zext i1 <vlocal_result(expr_id)> to i32
>>

bool_print(id, expr, expr_id) ::= <<
<expr>
  br i1 <vlocal_result(expr_id)>, label bool_print_true<id>, label bool_print_false<id>

bool_print_true<id>:
  <vlocal(id)>.t = getelementptr [2 x i8]* @.str.fmt.boolT, i32 0, i32 0
  br label bool_print_output<id>

bool_print_true<id>:
  <vlocal(id)>.f = getelementptr [2 x i8]* @.str.fmt.boolF, i32 0, i32 0
  br label bool_print_output<id>

bool_print_output<id>:
  <vlocal(id)>.ptr = phi i8* [<vlocal(id)>.t bool_print_true<id>], [<vlocal(id)>.f bool_print_false<id>]
  call i32 (i8*, ...)* @printf(i8* <vlocal(id)>, i32 <vlocal_result(expr_id)>)
>>