matrix_type() ::= <<
i8*
>>

matrix_init_local(sym_id) ::= <<
<vlocal_symbol(sym_id)> = alloca i8*
>>

matrix_init_global(sym_id) ::= <<
<vglobalSymbol(sym_id)> = private unnamed_addr global i8* null
>>

matrix_alloc_local(sym_id) ::= <<
	<vlocal_result(sym_id)>_alloc = call i8* @allocMatrix()
	store i8* <vlocal_result(sym_id)>_alloc, i8** <vlocal_symbol(sym_id)>
>>

matrix_alloc_global(sym_id) ::= <<
	<vlocal_result(sym_id)>_alloc = call i8* @allocMatrix()
	store i8* <vlocal_result(sym_id)>_alloc, i8** <vglobalSymbol(sym_id)>
>>

matrix_get_local(id, sym_id) ::= <<
  <vlocal_result(id)> = load i8** <vlocal_symbol(sym_id)>
>>

matrix_get_global(id, sym_id) ::= <<
  <vlocal_result(id)> = load i8** <vglobalSymbol(sym_id)>
>>

matrix_get_local_var(id, sym_id) ::= <<
  <vlocal_result(id)> = bitcast i8** <vlocal_symbol(sym_id)> to i8**
>>

matrix_get_global_var(id, sym_id) ::= <<
  <vlocal_result(id)> = bitcast i8** <vglobalSymbol(sym_id)> to i8**
>>

matrix_init_literal(id, type_name, size_expr, size_expr_id, element_exprs) ::= <<
<size_expr>
  <vlocal_result(id)> = call i8* @allocMatrix()
  call void @<type_name>_startLiteralMatrixCreation(i32 <vlocal_result(size_expr_id)>)
<element_exprs; separator="\n">
  call void @<type_name>_endLiteralMatrixCreation(i8* <vlocal_result(id)>)
>>

matrix_add_vector_literal(id, type_name, expr, expr_id) ::= <<
<expr>
  call void @<type_name>_addLiteralMatrixCreation(i8* <vlocal_result(expr_id)>)
>>

matrix_assign_decl_infer(id, type_name, matrix_var_expr, matrix_var_expr_id, rhs_expr, rhs_expr_id) ::= <<
<rhs_expr>
<matrix_var_expr>
  ;// Alloc new lhs matrix with right size
  <vlocal(id)>_rows = call i32 @getMatrixRows(i8* <vlocal_result(rhs_expr_id)>)
  <vlocal(id)>_columns = call i32 @getMatrixColumns(i8* <vlocal_result(rhs_expr_id)>)
  <vlocal(id)>_matrix = call i8* @allocMatrix()
  call void @<type_name>_allocMatrix(i8* <vlocal(id)>_matrix, i32 <vlocal(id)>_rows, i32 <vlocal(id)>_columns)
  call void @<type_name>_assignMatrix(i8* <vlocal(id)>_matrix, i8* <vlocal_result(rhs_expr_id)>)
  store i8* <vlocal(id)>_matrix, i8** <vlocal_result(matrix_var_expr_id)>
>>

matrix_assign_decl_column_infer(id, type_name, matrix_var_expr, matrix_var_expr_id, row_size, row_size_id, rhs_expr, rhs_expr_id) ::= <<
<rhs_expr>
<row_size>
<matrix_var_expr>
  ;// Alloc new lhs matrix with right size
  <vlocal(id)>_columns = call i32 @getMatrixColumns(i8* <vlocal_result(rhs_expr_id)>)
  <vlocal(id)>_matrix = call i8* @allocMatrix()
  call void @<type_name>_allocMatrix(i8* <vlocal(id)>_matrix, i32 <vlocal_result(row_size_id)>, i32 <vlocal(id)>_columns)
  call void @<type_name>_assignMatrix(i8* <vlocal(id)>_matrix, i8* <vlocal_result(rhs_expr_id)>)
  store i8* <vlocal(id)>_matrix, i8** <vlocal_result(matrix_var_expr_id)>
>>

matrix_assign_decl_row_infer(id, type_name, matrix_var_expr, matrix_var_expr_id, column_size, column_size_id, rhs_expr, rhs_expr_id) ::= <<
<rhs_expr>
<column_size>
<matrix_var_expr>
  ;// Alloc new lhs matrix with right size
  <vlocal(id)>_rows = call i32 @getMatrixRows(i8* <vlocal_result(rhs_expr_id)>)
  <vlocal(id)>_matrix = call i8* @allocMatrix()
  call void @<type_name>_allocMatrix(i8* <vlocal(id)>_matrix, i32 <vlocal(id)>_rows, i32 <vlocal_result(column_size_id)>)
  call void @<type_name>_assignMatrix(i8* <vlocal(id)>_matrix, i8* <vlocal_result(rhs_expr_id)>)
  store i8* <vlocal(id)>_matrix, i8** <vlocal_result(matrix_var_expr_id)>
>>

matrix_assign_decl(id, type_name, matrix_var_expr, matrix_var_expr_id, row_size, row_size_id, column_size, column_size_id, rhs_expr, rhs_expr_id) ::= <<
<rhs_expr>
<column_size>
<row_size>
<matrix_var_expr>
  <vlocal(id)>_matrix = call i8* @allocMatrix()
  call void @<type_name>_allocMatrix(i8* <vlocal(id)>_matrix, i32 <vlocal_result(row_size_id)>, i32 <vlocal_result(column_size_id)>)
  call void @<type_name>_assignMatrix(i8* <vlocal(id)>_matrix, i8* <vlocal_result(rhs_expr_id)>)
  store i8* <vlocal(id)>_matrix, i8** <vlocal_result(matrix_var_expr_id)>
>>

matrix_assign_decl_scalar(id, type_name, llvm_type, matrix_var_expr, matrix_var_expr_id, row_size, row_size_id, column_size, column_size_id, rhs_expr, rhs_expr_id) ::= <<
<rhs_expr>
<column_size>
<row_size>
<matrix_var_expr>
  <vlocal(id)>_matrix = call i8* @allocMatrix()
  call void @<type_name>_allocMatrix(i8* <vlocal(id)>_matrix, i32 <vlocal_result(row_size_id)>, i32 <vlocal_result(column_size_id)>)
  call void @<type_name>_assignMatrixScalar(i8* <vlocal(id)>_matrix, <llvm_type> <vlocal_result(rhs_expr_id)>)
  store i8* <vlocal(id)>_matrix, i8** <vlocal_result(matrix_var_expr_id)>
>>

matrix_assign(id, type_name, llvm_type, matrix_var_expr, matrix_var_expr_id, row_size, row_size_id, column_size, column_size_id, rhs_expr, rhs_expr_id) ::= <<
<rhs_expr>
<column_size>
<row_size>
<matrix_var_expr>
  <vlocal(id)>_mat = load i8** <vlocal_result(matrix_var_expr_id)>
  call void @<type_name>_assignMatrix(i8* <vlocal(id)>_mat, i8* <vlocal_result(rhs_expr_id)>)
>>

matrix_assign_scalar(id, type_name, llvm_type, matrix_var_expr, matrix_var_expr_id, row_size, row_size_id, column_size, column_size_id, rhs_expr, rhs_expr_id) ::= <<
<rhs_expr>
<column_size>
<row_size>
<matrix_var_expr>
  <vlocal(id)>_mat = load i8** <vlocal_result(matrix_var_expr_id)>
  call void @<type_name>_assignMatrixScalar(i8* <vlocal(id)>_mat, <llvm_type> <vlocal_result(rhs_expr_id)>)
>>

matrix_elem_assign(id, type_name, llvm_type, matrix_expr, matrix_expr_id, row_expr, row_expr_id, column_expr, column_expr_id, expr, expr_id) ::= <<
<expr>
<column_expr>
<row_expr>
<matrix_expr>
  <vlocal(id)>_success = call i1 @<type_name>_setElementMatrix(i8* <vlocal_result(matrix_expr_id)>, i32 <vlocal_result(row_expr_id)>, i32 <vlocal_result(column_expr_id)>, <llvm_type> <vlocal_result(expr_id)>)
  br i1 <vlocal(id)>_success, label %if.success<id>, label %if.fail<id>
  
if.fail<id>:
	call void @printMatrixIndexingOutOfBounds()
	call void @gc_free_all()
  	tail call void @exit(i32 -1)
  	unreachable
  
if.success<id>:
>>

matrix_row_assign(id, type_name, llvm_type, matrix_expr, matrix_expr_id, row_expr, row_expr_id, column_expr, column_expr_id, expr, expr_id) ::= <<
<expr>
<column_expr>
<row_expr>
<matrix_expr>
  <vlocal(id)>_success = call i1 @<type_name>_rowAssignMatrix(i8* <vlocal_result(matrix_expr_id)>, i32 <vlocal_result(row_expr_id)>, i8* <vlocal_result(column_expr_id)>, i8* <vlocal_result(expr_id)>)
  br i1 <vlocal(id)>_success, label %if.success<id>, label %if.fail<id>
  
if.fail<id>:
	call void @printMatrixIndexingOutOfBounds()
	call void @gc_free_all()
  	tail call void @exit(i32 -1)
  	unreachable
  
if.success<id>:
>>

matrix_row_assign_scalar(id, type_name, llvm_type, matrix_expr, matrix_expr_id, row_expr, row_expr_id, column_expr, column_expr_id, expr, expr_id) ::= <<
<expr>
<column_expr>
<row_expr>
<matrix_expr>
  <vlocal(id)>_success = call i1 @<type_name>_scalarRowAssignMatrix(i8* <vlocal_result(matrix_expr_id)>, i32 <vlocal_result(row_expr_id)>, i8* <vlocal_result(column_expr_id)>, <llvm_type> <vlocal_result(expr_id)>)
  br i1 <vlocal(id)>_success, label %if.success<id>, label %if.fail<id>
  
if.fail<id>:
	call void @printMatrixIndexingOutOfBounds()
	call void @gc_free_all()
  	tail call void @exit(i32 -1)
  	unreachable
  
if.success<id>:
>>

matrix_column_assign(id, type_name, llvm_type, matrix_expr, matrix_expr_id, row_expr, row_expr_id, column_expr, column_expr_id, expr, expr_id) ::= <<
<expr>
<column_expr>
<row_expr>
<matrix_expr>
  <vlocal(id)>_success = call i1 @<type_name>_columnAssignMatrix(i8* <vlocal_result(matrix_expr_id)>, i8* <vlocal_result(row_expr_id)>, i32 <vlocal_result(column_expr_id)>, i8* <vlocal_result(expr_id)>)
  br i1 <vlocal(id)>_success, label %if.success<id>, label %if.fail<id>
  
if.fail<id>:
	call void @printMatrixIndexingOutOfBounds()
	call void @gc_free_all()
  	tail call void @exit(i32 -1)
  	unreachable
  
if.success<id>:
>>

matrix_column_assign_scalar(id, type_name, llvm_type, matrix_expr, matrix_expr_id, row_expr, row_expr_id, column_expr, column_expr_id, expr, expr_id) ::= <<
<expr>
<column_expr>
<row_expr>
<matrix_expr>
  <vlocal(id)>_success = call i1 @<type_name>_scalarColumnAssignMatrix(i8* <vlocal_result(matrix_expr_id)>, i8* <vlocal_result(row_expr_id)>, i32 <vlocal_result(column_expr_id)>, <llvm_type> <vlocal_result(expr_id)>)
  br i1 <vlocal(id)>_success, label %if.success<id>, label %if.fail<id>
  
if.fail<id>:
	call void @printMatrixIndexingOutOfBounds()
	call void @gc_free_all()
  	tail call void @exit(i32 -1)
  	unreachable
  
if.success<id>:
>>

matrix_index_assign_matrix(id, type_name, llvm_type, matrix_expr, matrix_expr_id, row_expr, row_expr_id, column_expr, column_expr_id, expr, expr_id) ::= <<
<expr>
<column_expr>
<row_expr>
<matrix_expr>
  <vlocal(id)>_success = call i1 @<type_name>_matrixAssignMatrix(i8* <vlocal_result(matrix_expr_id)>, i8* <vlocal_result(row_expr_id)>, i8* <vlocal_result(column_expr_id)>, i8* <vlocal_result(expr_id)>)
  br i1 <vlocal(id)>_success, label %if.success<id>, label %if.fail<id>
  
if.fail<id>:
	call void @printMatrixIndexingOutOfBounds()
	call void @gc_free_all()
  	tail call void @exit(i32 -1)
  	unreachable
  
if.success<id>:
>>

matrix_index_assign_scalar(id, type_name, llvm_type, matrix_expr, matrix_expr_id, row_expr, row_expr_id, column_expr, column_expr_id, expr, expr_id) ::= <<
<expr>
<column_expr>
<row_expr>
<matrix_expr>
  <vlocal(id)>_success = call i1 @<type_name>_scalarAssignMatrix(i8* <vlocal_result(matrix_expr_id)>, i8* <vlocal_result(row_expr_id)>, i8* <vlocal_result(column_expr_id)>, <llvm_type> <vlocal_result(expr_id)>)
  br i1 <vlocal(id)>_success, label %if.success<id>, label %if.fail<id>
  
if.fail<id>:
	call void @printMatrixIndexingOutOfBounds()
	call void @gc_free_all()
  	tail call void @exit(i32 -1)
  	unreachable
  
if.success<id>:
>>

matrix_get_element(id, type_name, llvm_type, matrix_expr, matrix_expr_id, row_expr, row_expr_id, column_expr, column_expr_id) ::= <<
<column_expr>
<row_expr>
<matrix_expr>
  <vlocal(id)>_stack = call i8* @llvm.stacksave();
  <vlocal(id)>_value = alloca <llvm_type>;
  <vlocal(id)>_success = call i1 @<type_name>_getElementMatrix(<llvm_type>* <vlocal(id)>_value, i8* <vlocal_result(matrix_expr_id)>, i32 <vlocal_result(row_expr_id)>, i32 <vlocal_result(column_expr_id)>)
  br i1 <vlocal(id)>_success, label %if.success<id>, label %if.fail<id>
  
if.fail<id>:
	call void @printMatrixIndexingOutOfBounds()
	call void @gc_free_all()
  	tail call void @exit(i32 -1)
  	unreachable
  
if.success<id>:
  
  <vlocal_result(id)> = load <llvm_type>* <vlocal(id)>_value
  call void @llvm.stackrestore(i8* <vlocal(id)>_stack);
>>

matrix_row_index(id, type_name, llvm_type, matrix_expr, matrix_expr_id, row_expr, row_expr_id, column_expr, column_expr_id) ::= <<
<column_expr>
<row_expr>
<matrix_expr>
  <vlocal_result(id)> = call i8* @allocVector()
  <vlocal(id)>_success = call i1 @<type_name>_rowIndexMatrix(i8* <vlocal_result(id)>, i8* <vlocal_result(matrix_expr_id)>, i32 <vlocal_result(row_expr_id)>, i8* <vlocal_result(column_expr_id)>)
  br i1 <vlocal(id)>_success, label %if.success<id>, label %if.fail<id>
  
if.fail<id>:
	call void @printMatrixIndexingOutOfBounds()
	call void @gc_free_all()
  	tail call void @exit(i32 -1)
  	unreachable
  
if.success<id>:
>>

matrix_column_index(id, type_name, llvm_type, matrix_expr, matrix_expr_id, row_expr, row_expr_id, column_expr, column_expr_id) ::= <<
<column_expr>
<row_expr>
<matrix_expr>
  <vlocal_result(id)> = call i8* @allocVector()
  <vlocal(id)>_success = call i1 @<type_name>_columnIndexMatrix(i8* <vlocal_result(id)>, i8* <vlocal_result(matrix_expr_id)>, i8* <vlocal_result(row_expr_id)>, i32 <vlocal_result(column_expr_id)>)
  br i1 <vlocal(id)>_success, label %if.success<id>, label %if.fail<id>
  
if.fail<id>:
	call void @printMatrixIndexingOutOfBounds()
	call void @gc_free_all()
  	tail call void @exit(i32 -1)
  	unreachable
  
if.success<id>:
>>

matrix_index(id, type_name, llvm_type, matrix_expr, matrix_expr_id, row_expr, row_expr_id, column_expr, column_expr_id) ::= <<
<column_expr>
<row_expr>
<matrix_expr>
  <vlocal_result(id)> = call i8* @allocMatrix()
  <vlocal(id)>_success = call i1 @<type_name>_indexMatrix(i8* <vlocal_result(id)>, i8* <vlocal_result(matrix_expr_id)>, i8* <vlocal_result(row_expr_id)>, i8* <vlocal_result(column_expr_id)>)
  br i1 <vlocal(id)>_success, label %if.success<id>, label %if.fail<id>
  
if.fail<id>:
	call void @printMatrixIndexingOutOfBounds()
	call void @gc_free_all()
  	tail call void @exit(i32 -1)
  	unreachable
  
if.success<id>:
>>

matrix_add_matrix(id, type_name, size_check, llvm_type, lhs, lhs_id, rhs, rhs_id) ::= <<
<rhs>
<lhs>
<size_check>
  <vlocal_result(id)> = call i8* @allocMatrix()
  <vlocal(id)>_rows = call i32 @getMatrixRows(i8* <vlocal_result(lhs_id)>)
  <vlocal(id)>_columns = call i32 @getMatrixColumns(i8* <vlocal_result(lhs_id)>)
  call void @<type_name>_allocMatrix(i8* <vlocal_result(id)>, i32 <vlocal(id)>_rows, i32 <vlocal(id)>_columns)
  call void @<type_name>_MatrixAddMatrix(i8* <vlocal_result(id)>, i8* <vlocal_result(lhs_id)>, i8* <vlocal_result(rhs_id)>)
>>

matrix_add_scalar(id, type_name, llvm_type, lhs, lhs_id, rhs, rhs_id) ::= <<
<rhs>
<lhs>
  <vlocal_result(id)> = call i8* @allocMatrix()
  <vlocal(id)>_rows = call i32 @getMatrixRows(i8* <vlocal_result(lhs_id)>)
  <vlocal(id)>_columns = call i32 @getMatrixColumns(i8* <vlocal_result(lhs_id)>)
  call void @<type_name>_allocMatrix(i8* <vlocal_result(id)>, i32 <vlocal(id)>_rows, i32 <vlocal(id)>_columns)
  call void @<type_name>_MatrixAddScalar(i8* <vlocal_result(id)>, i8* <vlocal_result(lhs_id)>, <llvm_type> <vlocal_result(rhs_id)>)
>>

scalar_add_matrix(id, type_name, llvm_type, lhs, lhs_id, rhs, rhs_id) ::= <<
<rhs>
<lhs>
  <vlocal_result(id)> = call i8* @allocMatrix()
  <vlocal(id)>_rows = call i32 @getMatrixRows(i8* <vlocal_result(rhs_id)>)
  <vlocal(id)>_columns = call i32 @getMatrixColumns(i8* <vlocal_result(rhs_id)>)
  call void @<type_name>_allocMatrix(i8* <vlocal_result(id)>, i32 <vlocal(id)>_rows, i32 <vlocal(id)>_columns)
  call void @<type_name>_MatrixAddScalar(i8* <vlocal_result(id)>, i8* <vlocal_result(rhs_id)>, <llvm_type> <vlocal_result(lhs_id)>)
>>

matrix_subtract_matrix(id, type_name, size_check, llvm_type, lhs, lhs_id, rhs, rhs_id) ::= <<
<rhs>
<lhs>
<size_check>
  <vlocal_result(id)> = call i8* @allocMatrix()
  <vlocal(id)>_rows = call i32 @getMatrixRows(i8* <vlocal_result(lhs_id)>)
  <vlocal(id)>_columns = call i32 @getMatrixColumns(i8* <vlocal_result(lhs_id)>)
  call void @<type_name>_allocMatrix(i8* <vlocal_result(id)>, i32 <vlocal(id)>_rows, i32 <vlocal(id)>_columns)
  call void @<type_name>_MatrixSubtractMatrix(i8* <vlocal_result(id)>, i8* <vlocal_result(lhs_id)>, i8* <vlocal_result(rhs_id)>)
>>

matrix_subtract_scalar(id, type_name, llvm_type, lhs, lhs_id, rhs, rhs_id) ::= <<
<rhs>
<lhs>
  <vlocal_result(id)> = call i8* @allocMatrix()
  <vlocal(id)>_rows = call i32 @getMatrixRows(i8* <vlocal_result(lhs_id)>)
  <vlocal(id)>_columns = call i32 @getMatrixColumns(i8* <vlocal_result(lhs_id)>)
  call void @<type_name>_allocMatrix(i8* <vlocal_result(id)>, i32 <vlocal(id)>_rows, i32 <vlocal(id)>_columns)
  call void @<type_name>_MatrixSubtractScalar(i8* <vlocal_result(id)>, i8* <vlocal_result(lhs_id)>, <llvm_type> <vlocal_result(rhs_id)>)
>>

scalar_subtract_matrix(id, type_name, llvm_type, lhs, lhs_id, rhs, rhs_id) ::= <<
<rhs>
<lhs>
  <vlocal_result(id)> = call i8* @allocMatrix()
  <vlocal(id)>_rows = call i32 @getMatrixRows(i8* <vlocal_result(rhs_id)>)
  <vlocal(id)>_columns = call i32 @getMatrixColumns(i8* <vlocal_result(rhs_id)>)
  call void @<type_name>_allocMatrix(i8* <vlocal_result(id)>, i32 <vlocal(id)>_rows, i32 <vlocal(id)>_columns)
  call void @<type_name>_ScalarSubtractMatrix(i8* <vlocal_result(id)>, <llvm_type> <vlocal_result(lhs_id)>, i8* <vlocal_result(rhs_id)>)
>>

matrix_multiply_matrix(id, type_name, size_check, llvm_type, lhs, lhs_id, rhs, rhs_id) ::= <<
<rhs>
<lhs>
<size_check>
  <vlocal_result(id)> = call i8* @allocMatrix()
  <vlocal(id)>_rows = call i32 @getMatrixRows(i8* <vlocal_result(lhs_id)>)
  <vlocal(id)>_columns = call i32 @getMatrixColumns(i8* <vlocal_result(lhs_id)>)
  call void @<type_name>_allocMatrix(i8* <vlocal_result(id)>, i32 <vlocal(id)>_rows, i32 <vlocal(id)>_columns)
  call void @<type_name>_MatrixMultiplyMatrix(i8* <vlocal_result(id)>, i8* <vlocal_result(lhs_id)>, i8* <vlocal_result(rhs_id)>)
>>

matrix_multiply_scalar(id, type_name, llvm_type, lhs, lhs_id, rhs, rhs_id) ::= <<
<rhs>
<lhs>
  <vlocal_result(id)> = call i8* @allocMatrix()
  <vlocal(id)>_rows = call i32 @getMatrixRows(i8* <vlocal_result(lhs_id)>)
  <vlocal(id)>_columns = call i32 @getMatrixColumns(i8* <vlocal_result(lhs_id)>)
  call void @<type_name>_allocMatrix(i8* <vlocal_result(id)>, i32 <vlocal(id)>_rows, i32 <vlocal(id)>_columns)
  call void @<type_name>_MatrixMultiplyScalar(i8* <vlocal_result(id)>, i8* <vlocal_result(lhs_id)>, <llvm_type> <vlocal_result(rhs_id)>)
>>

scalar_multiply_matrix(id, type_name, llvm_type, lhs, lhs_id, rhs, rhs_id) ::= <<
<rhs>
<lhs>
  <vlocal_result(id)> = call i8* @allocMatrix()
  <vlocal(id)>_rows = call i32 @getMatrixRows(i8* <vlocal_result(rhs_id)>)
  <vlocal(id)>_columns = call i32 @getMatrixColumns(i8* <vlocal_result(rhs_id)>)
  call void @<type_name>_allocMatrix(i8* <vlocal_result(id)>, i32 <vlocal(id)>_rows, i32 <vlocal(id)>_columns)
  call void @<type_name>_MatrixMultiplyScalar(i8* <vlocal_result(id)>, i8* <vlocal_result(rhs_id)>, <llvm_type> <vlocal_result(lhs_id)>)
>>

matrix_divide_matrix(id, type_name, size_check, llvm_type, lhs, lhs_id, rhs, rhs_id) ::= <<
<rhs>
<lhs>
<size_check>
  <vlocal_result(id)> = call i8* @allocMatrix()
  <vlocal(id)>_rows = call i32 @getMatrixRows(i8* <vlocal_result(lhs_id)>)
  <vlocal(id)>_columns = call i32 @getMatrixColumns(i8* <vlocal_result(lhs_id)>)
  call void @<type_name>_allocMatrix(i8* <vlocal_result(id)>, i32 <vlocal(id)>_rows, i32 <vlocal(id)>_columns)
  call void @<type_name>_MatrixDivideMatrix(i8* <vlocal_result(id)>, i8* <vlocal_result(lhs_id)>, i8* <vlocal_result(rhs_id)>)
>>

matrix_divide_scalar(id, type_name, llvm_type, lhs, lhs_id, rhs, rhs_id) ::= <<
<rhs>
<lhs>
  <vlocal_result(id)> = call i8* @allocMatrix()
  <vlocal(id)>_rows = call i32 @getMatrixRows(i8* <vlocal_result(lhs_id)>)
  <vlocal(id)>_columns = call i32 @getMatrixColumns(i8* <vlocal_result(lhs_id)>)
  call void @<type_name>_allocMatrix(i8* <vlocal_result(id)>, i32 <vlocal(id)>_rows, i32 <vlocal(id)>_columns)
  call void @<type_name>_MatrixDivideScalar(i8* <vlocal_result(id)>, i8* <vlocal_result(lhs_id)>, <llvm_type> <vlocal_result(rhs_id)>)
>>

scalar_divide_matrix(id, type_name, llvm_type, lhs, lhs_id, rhs, rhs_id) ::= <<
<rhs>
<lhs>
  <vlocal_result(id)> = call i8* @allocMatrix()
  <vlocal(id)>_rows = call i32 @getMatrixRows(i8* <vlocal_result(rhs_id)>)
  <vlocal(id)>_columns = call i32 @getMatrixColumns(i8* <vlocal_result(rhs_id)>)
  call void @<type_name>_allocMatrix(i8* <vlocal_result(id)>, i32 <vlocal(id)>_rows, i32 <vlocal(id)>_columns)
  call void @<type_name>_ScalarDivideMatrix(i8* <vlocal_result(id)>, <llvm_type> <vlocal_result(lhs_id)>, i8* <vlocal_result(rhs_id)>)
>>

matrix_modulus_matrix(id, type_name, size_check, llvm_type, lhs, lhs_id, rhs, rhs_id) ::= <<
<rhs>
<lhs>
<size_check>
  <vlocal_result(id)> = call i8* @allocMatrix()
  <vlocal(id)>_rows = call i32 @getMatrixRows(i8* <vlocal_result(lhs_id)>)
  <vlocal(id)>_columns = call i32 @getMatrixColumns(i8* <vlocal_result(lhs_id)>)
  call void @<type_name>_allocMatrix(i8* <vlocal_result(id)>, i32 <vlocal(id)>_rows, i32 <vlocal(id)>_columns)
  call void @<type_name>_MatrixModulusMatrix(i8* <vlocal_result(id)>, i8* <vlocal_result(lhs_id)>, i8* <vlocal_result(rhs_id)>)
>>

matrix_modulus_scalar(id, type_name, llvm_type, lhs, lhs_id, rhs, rhs_id) ::= <<
<rhs>
<lhs>
  <vlocal_result(id)> = call i8* @allocMatrix()
  <vlocal(id)>_rows = call i32 @getMatrixRows(i8* <vlocal_result(lhs_id)>)
  <vlocal(id)>_columns = call i32 @getMatrixColumns(i8* <vlocal_result(lhs_id)>)
  call void @<type_name>_allocMatrix(i8* <vlocal_result(id)>, i32 <vlocal(id)>_rows, i32 <vlocal(id)>_columns)
  call void @<type_name>_MatrixModulusScalar(i8* <vlocal_result(id)>, i8* <vlocal_result(lhs_id)>, <llvm_type> <vlocal_result(rhs_id)>)
>>

scalar_modulus_matrix(id, type_name, llvm_type, lhs, lhs_id, rhs, rhs_id) ::= <<
<rhs>
<lhs>
  <vlocal_result(id)> = call i8* @allocMatrix()
  <vlocal(id)>_rows = call i32 @getMatrixRows(i8* <vlocal_result(rhs_id)>)
  <vlocal(id)>_columns = call i32 @getMatrixColumns(i8* <vlocal_result(rhs_id)>)
  call void @<type_name>_allocMatrix(i8* <vlocal_result(id)>, i32 <vlocal(id)>_rows, i32 <vlocal(id)>_columns)
  call void @<type_name>_ScalarModulusMatrix(i8* <vlocal_result(id)>, <llvm_type> <vlocal_result(lhs_id)>, i8* <vlocal_result(rhs_id)>)
>>

matrix_power_matrix(id, type_name, size_check, llvm_type, lhs, lhs_id, rhs, rhs_id) ::= <<
<rhs>
<lhs>
<size_check>
  <vlocal_result(id)> = call i8* @allocMatrix()
  <vlocal(id)>_rows = call i32 @getMatrixRows(i8* <vlocal_result(lhs_id)>)
  <vlocal(id)>_columns = call i32 @getMatrixColumns(i8* <vlocal_result(lhs_id)>)
  call void @<type_name>_allocMatrix(i8* <vlocal_result(id)>, i32 <vlocal(id)>_rows, i32 <vlocal(id)>_columns)
  call void @<type_name>_MatrixPowerMatrix(i8* <vlocal_result(id)>, i8* <vlocal_result(lhs_id)>, i8* <vlocal_result(rhs_id)>)
>>

matrix_power_scalar(id, type_name, llvm_type, lhs, lhs_id, rhs, rhs_id) ::= <<
<rhs>
<lhs>
  <vlocal_result(id)> = call i8* @allocMatrix()
  <vlocal(id)>_rows = call i32 @getMatrixRows(i8* <vlocal_result(lhs_id)>)
  <vlocal(id)>_columns = call i32 @getMatrixColumns(i8* <vlocal_result(lhs_id)>)
  call void @<type_name>_allocMatrix(i8* <vlocal_result(id)>, i32 <vlocal(id)>_rows, i32 <vlocal(id)>_columns)
  call void @<type_name>_MatrixPowerScalar(i8* <vlocal_result(id)>, i8* <vlocal_result(lhs_id)>, <llvm_type> <vlocal_result(rhs_id)>)
>>

scalar_power_matrix(id, type_name, llvm_type, lhs, lhs_id, rhs, rhs_id) ::= <<
<rhs>
<lhs>
  <vlocal_result(id)> = call i8* @allocMatrix()
  <vlocal(id)>_rows = call i32 @getMatrixRows(i8* <vlocal_result(rhs_id)>)
  <vlocal(id)>_columns = call i32 @getMatrixColumns(i8* <vlocal_result(rhs_id)>)
  call void @<type_name>_allocMatrix(i8* <vlocal_result(id)>, i32 <vlocal(id)>_rows, i32 <vlocal(id)>_columns)
  call void @<type_name>_ScalarPowerMatrix(i8* <vlocal_result(id)>, <llvm_type> <vlocal_result(lhs_id)>, i8* <vlocal_result(rhs_id)>)
>>

matrix_lt_matrix(id, type_name, size_check, llvm_type, lhs, lhs_id, rhs, rhs_id) ::= <<
<rhs>
<lhs>
<size_check>
  <vlocal_result(id)> = call i8* @allocMatrix()
  <vlocal(id)>_rows = call i32 @getMatrixRows(i8* <vlocal_result(lhs_id)>)
  <vlocal(id)>_columns = call i32 @getMatrixColumns(i8* <vlocal_result(lhs_id)>)
  call void @bool_allocMatrix(i8* <vlocal_result(id)>, i32 <vlocal(id)>_rows, i32 <vlocal(id)>_columns)
  call void @<type_name>_MatrixLTMatrix(i8* <vlocal_result(id)>, i8* <vlocal_result(lhs_id)>, i8* <vlocal_result(rhs_id)>)
>>

matrix_le_matrix(id, type_name, size_check, llvm_type, lhs, lhs_id, rhs, rhs_id) ::= <<
<rhs>
<lhs>
<size_check>
  <vlocal_result(id)> = call i8* @allocMatrix()
  <vlocal(id)>_rows = call i32 @getMatrixRows(i8* <vlocal_result(lhs_id)>)
  <vlocal(id)>_columns = call i32 @getMatrixColumns(i8* <vlocal_result(lhs_id)>)
  call void @bool_allocMatrix(i8* <vlocal_result(id)>, i32 <vlocal(id)>_rows, i32 <vlocal(id)>_columns)
  call void @<type_name>_MatrixLEMatrix(i8* <vlocal_result(id)>, i8* <vlocal_result(lhs_id)>, i8* <vlocal_result(rhs_id)>)
>>

matrix_gt_matrix(id, type_name, size_check, llvm_type, lhs, lhs_id, rhs, rhs_id) ::= <<
<rhs>
<lhs>
<size_check>
  <vlocal_result(id)> = call i8* @allocMatrix()
  <vlocal(id)>_rows = call i32 @getMatrixRows(i8* <vlocal_result(lhs_id)>)
  <vlocal(id)>_columns = call i32 @getMatrixColumns(i8* <vlocal_result(lhs_id)>)
  call void @bool_allocMatrix(i8* <vlocal_result(id)>, i32 <vlocal(id)>_rows, i32 <vlocal(id)>_columns)
  call void @<type_name>_MatrixGTMatrix(i8* <vlocal_result(id)>, i8* <vlocal_result(lhs_id)>, i8* <vlocal_result(rhs_id)>)
>>

matrix_ge_matrix(id, type_name, size_check, llvm_type, lhs, lhs_id, rhs, rhs_id) ::= <<
<rhs>
<lhs>
<size_check>
  <vlocal_result(id)> = call i8* @allocMatrix()
  <vlocal(id)>_rows = call i32 @getMatrixRows(i8* <vlocal_result(lhs_id)>)
  <vlocal(id)>_columns = call i32 @getMatrixColumns(i8* <vlocal_result(lhs_id)>)
  call void @bool_allocMatrix(i8* <vlocal_result(id)>, i32 <vlocal(id)>_rows, i32 <vlocal(id)>_columns)
  call void @<type_name>_MatrixGEMatrix(i8* <vlocal_result(id)>, i8* <vlocal_result(lhs_id)>, i8* <vlocal_result(rhs_id)>)
>>

matrix_eq_matrix(id, type_name, llvm_type, lhs, lhs_id, rhs, rhs_id) ::= <<
<rhs>
<lhs>
  <vlocal_result(id)> = call i1 @<type_name>_MatrixEq(i8* <vlocal_result(lhs_id)>, i8* <vlocal_result(rhs_id)>)
>>

matrix_ne_matrix(id, type_name, llvm_type, lhs, lhs_id, rhs, rhs_id) ::= <<
<rhs>
<lhs>
  <vlocal_result(id)> = call i1 @<type_name>_MatrixNe(i8* <vlocal_result(lhs_id)>, i8* <vlocal_result(rhs_id)>)
>>

matrix_and_matrix(id, type_name, size_check, llvm_type, lhs, lhs_id, rhs, rhs_id) ::= <<
<rhs>
<lhs>
<size_check>
  <vlocal_result(id)> = call i8* @allocMatrix()
  <vlocal(id)>_rows = call i32 @getMatrixRows(i8* <vlocal_result(lhs_id)>)
  <vlocal(id)>_columns = call i32 @getMatrixColumns(i8* <vlocal_result(lhs_id)>)
  call void @bool_allocMatrix(i8* <vlocal_result(id)>, i32 <vlocal(id)>_rows, i32 <vlocal(id)>_columns)
  call void @<type_name>_MatrixAndMatrix(i8* <vlocal_result(id)>, i8* <vlocal_result(lhs_id)>, i8* <vlocal_result(rhs_id)>);
>>

matrix_and_scalar(id, type_name, llvm_type, lhs, lhs_id, rhs, rhs_id) ::= <<
<rhs>
<lhs>
  <vlocal_result(id)> = call i8* @allocMatrix()
  <vlocal(id)>_rows = call i32 @getMatrixRows(i8* <vlocal_result(lhs_id)>)
  <vlocal(id)>_columns = call i32 @getMatrixColumns(i8* <vlocal_result(lhs_id)>)
  call void @bool_allocMatrix(i8* <vlocal_result(id)>, i32 <vlocal(id)>_rows, i32 <vlocal(id)>_columns)
  call void @<type_name>_MatrixAndScalar(i8* <vlocal_result(id)>, i8* <vlocal_result(lhs_id)>, <llvm_type> <vlocal_result(rhs_id)>);
>>

scalar_and_matrix(id, type_name, llvm_type, lhs, lhs_id, rhs, rhs_id) ::= <<
<rhs>
<lhs>
  <vlocal_result(id)> = call i8* @allocMatrix()
  <vlocal(id)>_rows = call i32 @getMatrixRows(i8* <vlocal_result(rhs_id)>)
  <vlocal(id)>_columns = call i32 @getMatrixColumns(i8* <vlocal_result(rhs_id)>)
  call void @bool_allocMatrix(i8* <vlocal_result(id)>, i32 <vlocal(id)>_rows, i32 <vlocal(id)>_columns)
  call void @<type_name>_MatrixAndScalar(i8* <vlocal_result(id)>, i8* <vlocal_result(rhs_id)>, <llvm_type> <vlocal_result(lhs_id)>);
>>

matrix_or_matrix(id, type_name, size_check, llvm_type, lhs, lhs_id, rhs, rhs_id) ::= <<
<rhs>
<lhs>
<size_check>
  <vlocal_result(id)> = call i8* @allocMatrix()
  <vlocal(id)>_rows = call i32 @getMatrixRows(i8* <vlocal_result(lhs_id)>)
  <vlocal(id)>_columns = call i32 @getMatrixColumns(i8* <vlocal_result(lhs_id)>)
  call void @bool_allocMatrix(i8* <vlocal_result(id)>, i32 <vlocal(id)>_rows, i32 <vlocal(id)>_columns)
  call void @<type_name>_MatrixOrMatrix(i8* <vlocal_result(id)>, i8* <vlocal_result(lhs_id)>, i8* <vlocal_result(rhs_id)>);
>>

matrix_or_scalar(id, type_name, llvm_type, lhs, lhs_id, rhs, rhs_id) ::= <<
<rhs>
<lhs>
  <vlocal_result(id)> = call i8* @allocMatrix()
  <vlocal(id)>_rows = call i32 @getMatrixRows(i8* <vlocal_result(lhs_id)>)
  <vlocal(id)>_columns = call i32 @getMatrixColumns(i8* <vlocal_result(lhs_id)>)
  call void @bool_allocMatrix(i8* <vlocal_result(id)>, i32 <vlocal(id)>_rows, i32 <vlocal(id)>_columns)
  call void @<type_name>_MatrixOrScalar(i8* <vlocal_result(id)>, i8* <vlocal_result(lhs_id)>, <llvm_type> <vlocal_result(rhs_id)>);
>>

scalar_or_matrix(id, type_name, llvm_type, lhs, lhs_id, rhs, rhs_id) ::= <<
<rhs>
<lhs>
  <vlocal_result(id)> = call i8* @allocMatrix()
  <vlocal(id)>_rows = call i32 @getMatrixRows(i8* <vlocal_result(rhs_id)>)
  <vlocal(id)>_columns = call i32 @getMatrixColumns(i8* <vlocal_result(rhs_id)>)
  call void @bool_allocMatrix(i8* <vlocal_result(id)>, i32 <vlocal(id)>_rows, i32 <vlocal(id)>_columns)
  call void @<type_name>_MatrixOrScalar(i8* <vlocal_result(id)>, i8* <vlocal_result(rhs_id)>, <llvm_type> <vlocal_result(lhs_id)>);
>>

matrix_xor_matrix(id, type_name, size_check, llvm_type, lhs, lhs_id, rhs, rhs_id) ::= <<
<rhs>
<lhs>
<size_check>
  <vlocal_result(id)> = call i8* @allocMatrix()
  <vlocal(id)>_rows = call i32 @getMatrixRows(i8* <vlocal_result(lhs_id)>)
  <vlocal(id)>_columns = call i32 @getMatrixColumns(i8* <vlocal_result(lhs_id)>)
  call void @bool_allocMatrix(i8* <vlocal_result(id)>, i32 <vlocal(id)>_rows, i32 <vlocal(id)>_columns)
  call void @<type_name>_MatrixXOrMatrix(i8* <vlocal_result(id)>, i8* <vlocal_result(lhs_id)>, i8* <vlocal_result(rhs_id)>);
>>

matrix_xor_scalar(id, type_name, llvm_type, lhs, lhs_id, rhs, rhs_id) ::= <<
<rhs>
<lhs>
  <vlocal_result(id)> = call i8* @allocMatrix()
  <vlocal(id)>_rows = call i32 @getMatrixRows(i8* <vlocal_result(lhs_id)>)
  <vlocal(id)>_columns = call i32 @getMatrixColumns(i8* <vlocal_result(lhs_id)>)
  call void @bool_allocMatrix(i8* <vlocal_result(id)>, i32 <vlocal(id)>_rows, i32 <vlocal(id)>_columns)
  call void @<type_name>_MatrixXOrScalar(i8* <vlocal_result(id)>, i8* <vlocal_result(lhs_id)>, <llvm_type> <vlocal_result(rhs_id)>);
>>

scalar_Xor_matrix(id, type_name, llvm_type, lhs, lhs_id, rhs, rhs_id) ::= <<
<rhs>
<lhs>
  <vlocal_result(id)> = call i8* @allocMatrix()
  <vlocal(id)>_rows = call i32 @getMatrixRows(i8* <vlocal_result(rhs_id)>)
  <vlocal(id)>_columns = call i32 @getMatrixColumns(i8* <vlocal_result(rhs_id)>)
  call void @bool_allocMatrix(i8* <vlocal_result(id)>, i32 <vlocal(id)>_rows, i32 <vlocal(id)>_columns)
  call void @<type_name>_MatrixXOrScalar(i8* <vlocal_result(id)>, i8* <vlocal_result(rhs_id)>, <llvm_type> <vlocal_result(lhs_id)>);
>>

matrix_minus(id, type_name, expr, expr_id) ::= <<
<expr>
  <vlocal_result(id)> = call i8* @allocMatrix()
  <vlocal(id)>_rows = call i32 @getMatrixRows(i8* <vlocal_result(expr_id)>)
  <vlocal(id)>_columns = call i32 @getMatrixColumns(i8* <vlocal_result(expr_id)>)
  call void @<type_name>_allocMatrix(i8* <vlocal_result(id)>, i32 <vlocal(id)>_rows, i32 <vlocal(id)>_columns)
  call void @<type_name>_MatrixUniaryMinus(i8* <vlocal_result(id)>, i8* <vlocal_result(expr_id)>);
>>

matrix_not(id, type_name, expr, expr_id) ::= <<
<expr>
  <vlocal_result(id)> = call i8* @allocMatrix()
  <vlocal(id)>_rows = call i32 @getMatrixRows(i8* <vlocal_result(expr_id)>)
  <vlocal(id)>_columns = call i32 @getMatrixColumns(i8* <vlocal_result(expr_id)>)
  call void @bool_allocMatrix(i8* <vlocal_result(id)>, i32 <vlocal(id)>_rows, i32 <vlocal(id)>_columns)
  call void @<type_name>_MatrixNot(i8* <vlocal_result(id)>, i8* <vlocal_result(expr_id)>);
>>


matrix_print(id, type_name, expr, expr_id) ::= <<
<expr>
	call void @<type_name>_printMatrix(i8* <vlocal_result(expr_id)>)
>>

matrix_to_real(id, type_name, matrix_var_expr, matrix_var_expr_id) ::= <<
<matrix_var_expr>
  <vlocal(id)>_rows = call i32 @getMatrixRows(i8* <vlocal_result(matrix_var_expr_id)>)
  <vlocal(id)>_columns = call i32 @getMatrixColumns(i8* <vlocal_result(matrix_var_expr_id)>)
  <vlocal_result(id)> = call i8* @allocMatrix()
  call void @real_allocMatrix(i8* <vlocal_result(id)>, i32 <vlocal(id)>_rows, i32 <vlocal(id)>_columns)
  call void @<type_name>_MatrixToReal(i8* <vlocal_result(id)>, i8* <vlocal_result(matrix_var_expr_id)>)
>>

check_matrices_same_length(id, lhs_id, rhs_id) ::= <<
  <vlocal(id)>_sizes_match = call i1 @checkMatricesSameLength(i8* <vlocal_result(lhs_id)>, i8* <vlocal_result(rhs_id)>)
  br i1 <vlocal(id)>_sizes_match, label %if.match<id>, label %if.mismatch<id>

if.mismatch<id>:
	call void @gc_free_all()
	tail call void @exit(i32 -1)
	unreachable

if.match<id>:
>>
/* TODO: Write rest of vector operation runtime function wrappers. */
