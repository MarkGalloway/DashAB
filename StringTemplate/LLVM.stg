group LLVM;

typeInitMap ::= [
    default:   "null"
]

program(types, globals, code) ::= <<
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

<externs()>

<types; separator="\n">

<string_constants()>

<globals>

<code>

<utils()>

>>

vglobal(id) ::= <<
@__<id>
>>
vlocal(id) ::= <<
%__<id>
>>
vlocal_result(id) ::= <<
%__<id>_result
>>

externs() ::= <<
declare i32 @puts(i8* nocapture) nounwind
declare i32 @printf(i8*, ...)
declare i8* @malloc(i32)
declare i8* @calloc(i32, i32)
declare void @free(i8*)
declare void @exit(i32)
>>

string_constants() ::= <<
@.str.lbrack = private unnamed_addr constant [2 x i8] c"[\00"
@.str.rbrack = private unnamed_addr constant [3 x i8] c" ]\00"
@.str.newline = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.fmt.num = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.fmt.num.newline = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@.str.fmt.num.lspace = private unnamed_addr constant [4 x i8] c" %d\00", align 1
>>

utils() ::= <<
>>

