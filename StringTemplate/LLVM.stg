group LLVM;

typeInitMap ::= [
    default:   "null"
]

program(type_defs, globals, code) ::= <<
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

<externs()>

<type_defs; separator="\n">

<string_constants()>

<globals>

<code>

<utils()>

>>

vglobalSymbol(id) ::= <<
@__<id>_symbol
>>
vlocal(id) ::= <<
%__<id>
>>
vlocal_result(id) ::= <<
%__<id>_result
>>
vlocalSymbol(id) ::= <<
%__<id>_symbol
>>
fglobal(id) ::= <<
@___func<id>
>>

externs() ::= <<
declare i32 @puts(i8* nocapture) nounwind
declare i32 @printf(i8*, ...)
declare i8* @malloc(i32)
declare i8* @calloc(i32, i32)
declare void @free(i8*)
declare void @exit(i32)
>>

string_constants() ::= <<
@.str.lbrack = private unnamed_addr constant [2 x i8] c"[\00"
@.str.rbrack = private unnamed_addr constant [3 x i8] c" ]\00"
@.str.newline = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.fmt.char = private unnamed_addr constant [3 x i8] c"%c\00", align 1
@.str.fmt.char.newline = private unnamed_addr constant [4 x i8] c"%c\0A\00", align 1
@.str.fmt.char.lspace = private unnamed_addr constant [4 x i8] c" %c\00", align 1
@.str.fmt.int = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.fmt.int.newline = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@.str.fmt.int.lspace = private unnamed_addr constant [4 x i8] c" %d\00", align 1
>>

utils() ::= <<
>>

tuple(id, types) ::= <<
%T<id> = type {
	<types>
}
>>

tuple_init_local(sym_id, type_id) ::= <<
<vlocalSymbol(sym_id)> = alloca %T<type_id>
>>

tuple_init_global(sym_id, type_id) ::= <<
<vglobalSymbol(sym_id)> = private unnamed_addr global %T<type_id> 0
>>

function_main(code) ::= <<
define i32 @main() nounwind uwtable {
<code; separator="\n">
}
>>

function(id, return_type, args, code) ::= <<
define <return_type> <fglobal(id)>(<args>) {
<code; separator="\n">
}
>>

return(id, expr, expr_id, type) ::= <<
<expr>
  ret <type> <vlocal_result(expr_id)>
>>

if(id, expr, expr_id, block) ::= <<
  <expr>
  %if<id>.cmp = icmp i1 <vlocal_result(expr_id)>, 1
  br i1 %if<id>.cmp, label %if.body<id>, label %if.done<id>

if.body<id>:
  <block>
  br label %if.done<id>
  
if.done<id>:

>>